{
	"info": {
		"_postman_id": "df9ecb14-43b9-4686-827d-14e64fe05fbd",
		"name": "Postman_GoRest_Assignment",
		"description": "The Postman_GoRest_Assignment collection is designed to thoroughly test the user management functionalities of the GoRest API in a staged environment. This collection covers the core CRUD operations (Create, Read, Update, Delete) for user management, ensuring comprehensive validation and error handling across all endpoints.\n\n****Environment: Staged**\n\n**Structure:**  \nUser Management  \n│──** Create (POST)  \n│── Get User (GET)  \n│── Update User (PUT)  \n│── Delete User (DELETE)\n\n**Key Operations:**\n\n1. **Create User (POST)**:\n    \n    - Validates the process of creating a new user by sending required data.\n        \n    - Tests include positive scenarios such as successful user creation, and negative cases like creating users with duplicate or invalid data (e.g., invalid email, missing fields).\n        \n2. **Get User (GET)**:\n    \n    - Fetches user data using different parameters, including filtering based on user ID or criteria.\n        \n    - Ensures proper handling of valid and invalid user IDs, checks pagination, and validates the structure of the returned response.\n        \n3. **Update User (PUT)**:\n    \n    - Verifies the functionality of updating existing user details.\n        \n    - Test cases cover updating fields such as name, gender, and status, with checks for empty or invalid IDs, invalid gender values, and missing authentication.\n        \n4. **Delete User (DELETE)**:\n    \n    - Tests the deletion of a user by their unique ID.\n        \n    - Validations ensure that deletion only occurs with a valid ID, while also handling cases with missing IDs, invalid IDs, and failed authentication scenarios.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "40807949"
	},
	"item": [
		{
			"name": "User Management",
			"item": [
				{
					"name": "Create (POST)",
					"item": [
						{
							"name": "Create User (TC-01) [P] - Should create user with valid fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"",
											"const formattedName = fullName.toLowerCase().replace(/\\s+/g, '.');",
											"",
											"const randomInteger = Math.floor(Math.random() * 1000);",
											"",
											"const emailId = `${formattedName}${randomInteger}@example.com`;",
											"",
											"// setting environment variables",
											"pm.environment.set(\"name\", code + fullName);",
											"pm.environment.set(\"email\", emailId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 - User Created\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"const userData = pm.response.json();",
											"pm.test(\"Response contains required user fields\", function () {",
											"    pm.expect(userData).to.have.property(\"id\");",
											"    pm.expect(userData).to.have.property(\"name\").that.is.a(\"string\");",
											"    pm.expect(userData).to.have.property(\"email\").that.is.a(\"string\").and.to.include(\"@example.com\");",
											"    pm.expect(userData).to.have.property(\"gender\").that.equals(\"female\");",
											"    pm.expect(userData).to.have.property(\"status\").that.equals(\"active\");",
											"});",
											"",
											"pm.test(\"Email field follows correct format\", function () {",
											"    var userData = pm.response.json();",
											"    var email = userData.email;",
											"    pm.expect(email).to.match(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/);  // Regex for email format",
											"});",
											"",
											"pm.test(\"Name should not be empty\", function () {",
											"    var userData = pm.response.json();",
											"    pm.expect(userData.name).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Gender should be either 'male' or 'female'\", function () {",
											"    var userData = pm.response.json();",
											"    pm.expect(userData.gender).to.be.oneOf([\"male\", \"female\"]);",
											"});",
											"",
											"pm.test(\"Status should be 'active'\", function () {",
											"    var userData = pm.response.json();",
											"    pm.expect(userData.status).to.equal(\"active\");",
											"});",
											"",
											"// storing the user ID in environment variable for future requests",
											"pm.environment.set(\"id\", userData.id);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"gender\": \"female\",\n    \"email\": \"{{email}}\",\n    \"status\": \"active\"\n}"
								},
								"url": "{{url}}/public/v2/users"
							},
							"response": []
						},
						{
							"name": "Create User (TC-02) [N] - Should not create user with valid name and invalid email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"pm.test(\"Response contains field property with value 'email'\", function () {",
											"    pm.expect(jsonData[0]).to.have.property(\"field\", \"email\");",
											"    pm.expect(pm.response.text()).to.include(\"is invalid\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "64f0216a8486d818e322577a61b1a77c7551ff89c3bb9c7a21c2d5648aed12d1"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"sneha gupta\", \"gender\":\"female\", \"email\":\"sneha.gupta.15ce.com\", \"status\":\"active\"}"
								},
								"url": "{{url}}/public/v2/users"
							},
							"response": []
						},
						{
							"name": "Create User (TC-03) [N] - Should not create user with duplicate credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"Tenali Ramakrishna\", \"gender\":\"male\", \"email\":\"tenali.ramakrishna@15ce.com\", \"status\":\"active\"}"
								},
								"url": "{{url}}/public/v2/users"
							},
							"response": []
						},
						{
							"name": "Create User (TC-04) [N] - Should not create user with duplicate email address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"Radhika \", \"gender\":\"female\", \"email\":\"radhika.sarda@15ce.com\", \"status\":\"active\"}"
								},
								"url": "{{url}}/public/v2/users"
							},
							"response": []
						},
						{
							"name": "Create User (TC-05) [P] - Should create user with inactive status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											"",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"",
											"// converting a name in an email friendly",
											"const formattedName = fullName.toLowerCase().replace(/\\s+/g, '.');",
											"",
											"const randomInteger = Math.floor(Math.random() * 1000);",
											"",
											"const emailId = `${formattedName}${randomInteger}@example.com`;",
											"",
											"// setting environment variables",
											"pm.environment.set(\"name\", code + fullName);",
											"pm.environment.set(\"email\", emailId);",
											"",
											"// Debugging: Print generated values",
											"console.log(\"Generated Name:\", fullName);",
											"console.log(\"Generated Email:\", emailId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"gender\": \"male\",\n    \"email\": \"{{email}}\",\n    \"status\": \"inactive\"\n}"
								},
								"url": "{{url}}/public/v2/users"
							},
							"response": []
						},
						{
							"name": "Create User (TC-06) [P] - Should create user with same name and different email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											" ",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"const emailId = pm.variables.replaceIn('{{$randomEmail}}');",
											" ",
											"pm.environment.set(\"name\", code + fullName);",
											" ",
											"pm.environment.set(\"email\", emailId);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"gender\": \"male\",\n    \"email\": \"{{email}}\",\n    \"status\": \"active\"\n}"
								},
								"url": "{{url}}/public/v2/users"
							},
							"response": []
						},
						{
							"name": "Create User (TC-07) [P] - Should not create user with gender other than male or female",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Verify user should have valid gender property\", function () {",
											"    pm.expect(jsonData[0]).to.have.property(\"field\", \"gender\");",
											"    pm.expect(pm.response.text()).to.include(\"can't be blank, can be male of female\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"moya\", \"gender\":\"third\", \"email\":\"moya.tem@15ce.com\", \"status\":\"active\"}"
								},
								"url": "{{url}}/public/v2/users"
							},
							"response": []
						},
						{
							"name": "Create User (TC-08) [P] - Should not create user with null name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Verify name should not be null\", function () {",
											"    pm.expect(jsonData[0]).to.have.property(\"field\", \"name\");",
											"    pm.expect(pm.response.text()).to.include(\"can't be blank\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"gender\": \"male\",\n    \"email\": \"tryit123@gmail.com\",\n    \"status\": \"active\"\n}"
								},
								"url": "{{url}}/public/v2/users"
							},
							"response": []
						},
						{
							"name": "Create User (TC-09) [P] - Should create user with name containing special characters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											" ",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}} @&%%');",
											"const emailId = pm.variables.replaceIn('{{$randomEmail}}');",
											" ",
											"pm.environment.set(\"name\", code + fullName);",
											" ",
											"pm.environment.set(\"email\", emailId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"gender\": \"female\",\n    \"email\": \"{{email}}\",\n    \"status\": \"active\"\n}"
								},
								"url": "{{url}}/public/v2/users"
							},
							"response": []
						},
						{
							"name": "Create User (TC-10) [P] - Should create user with maximum spaces in name field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											" ",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"const emailId = pm.variables.replaceIn('{{$randomEmail}}');",
											" ",
											"pm.environment.set(\"name\", code + fullName);",
											" ",
											"pm.environment.set(\"email\", emailId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"const userData = pm.response.json();",
											"pm.environment.set(\"id\", userData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"gender\": \"female\",\n    \"email\": \"{{email}}\",\n    \"status\": \"active\"\n}"
								},
								"url": "{{url}}/public/v2/users"
							},
							"response": []
						}
					],
					"description": "The **Create User Operation** is a `POST` request that adds a new user by sending **name, email, gender, and status** to the server.\n\n#### **📌 Request Details**\n\n- **Method:** `POST`\n    \n- **Headers:** `Content-Type: application/json`, `Authorization: Bearer`\n    \n- **Expected Responses**✅ **201 Created** – User successfully created  \n    **422 Unprocessable Entity** – Invalid/missing fields (e.g., duplicate or malformed email)  \n    **401 Unauthorized** – Missing or invalid authentication\n    \n- **Key Test Cases**\n    \n\n**`Valid user creation (201)  \nRequired fields validation (422)  \nUnique email enforcement (422)  \nAuthentication handling (401)`**"
				},
				{
					"name": "Get User (GET)",
					"item": [
						{
							"name": "Fetch User (TC-01) [P] - Should fetch user with valid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"const getBookResponse = pm.response.json();",
											"const schema = {",
											"  \"type\": \"object\", // root should be an object",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"gender\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"status\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"email\",",
											"    \"gender\",",
											"    \"status\"",
											"  ]",
											"};",
											"",
											"pm.test(\"Validate json response schema\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Validate json response data\", function () {",
											"    pm.expect(getBookResponse.name.trim()).to.eql(pm.environment.get(\"name\").trim());",
											"    pm.expect(getBookResponse.email).to.eql(pm.environment.get(\"email\"));",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{url}}/public/v2/users/{{id}}"
							},
							"response": []
						},
						{
							"name": "Fetch User (TC-02) [P] - Should fetch all user details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate response body structure\", function () {",
											"    const jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse).to.be.an('array');  ",
											"    pm.expect(jsonResponse[0]).to.have.property('id');",
											"    pm.expect(jsonResponse[0]).to.have.property('name');",
											"    pm.expect(jsonResponse[0]).to.have.property('email');",
											"    pm.expect(jsonResponse[0]).to.have.property('gender');",
											"    pm.expect(jsonResponse[0]).to.have.property('status');",
											"});",
											"",
											"pm.test(\"Validate user data types\", function () {",
											"    const jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse[0].id).to.be.a('number');",
											"    pm.expect(jsonResponse[0].name).to.be.a('string');",
											"    pm.expect(jsonResponse[0].email).to.be.a('string');",
											"    pm.expect(jsonResponse[0].gender).to.be.a('string');",
											"    pm.expect(jsonResponse[0].status).to.be.a('string');",
											"});",
											"",
											"pm.test(\"Validate response time\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Validate user status field\", function () {",
											"    const jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse[0].status).to.be.oneOf(['active', 'inactive']);",
											"});",
											"",
											"pm.test(\"Validate user ID is present\", function () {",
											"    const jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse[0].id).to.exist; ",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{url}}/public/v2/users"
							},
							"response": []
						},
						{
							"name": "Fetch User (TC-03) [N] - Should not fetch user with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"const jsonResponse = pm.response.json();",
											"pm.test(\"Error message is 'Resource not found'\", function () {",
											"    pm.expect(jsonResponse.message).to.eql(\"Resource not found\");",
											"});",
											"",
											"pm.test(\"Content-Type is JSON\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"pm.test(\"Response body contains 'message' property\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"message\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"    pm.expect(jsonResponse).to.not.be.empty;",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": "{{url}}/public/v2/users/{{id}}@32"
							},
							"response": []
						},
						{
							"name": "Fetch User (TC-04) [P] - Should fetch users with gender other than male",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"All users should have gender 'male' and status 'active' \", function () {",
											"    if (jsonData.length > 0) {",
											"        jsonData.forEach(user => {",
											"            pm.expect(user.gender).to.eql('male');",
											"            pm.expect(user.status).to.eql('active');",
											"        });",
											"    }",
											"});",
											"",
											"pm.test(\"Response contains valid user data\", function () {",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"All users should have the 'gender' field\", function () {",
											"    if (jsonData.length > 0) {",
											"        jsonData.forEach(user => {",
											"            pm.expect(user).to.have.property('gender');",
											"        });",
											"    }",
											"});",
											"",
											"pm.test(\"Response time is below 2 seconds\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											"",
											"pm.test(\"User data should have required properties\", function () {",
											"    if (jsonData.length > 0) {",
											"        jsonData.forEach(user => {",
											"            pm.expect(user).to.have.property('id');",
											"            pm.expect(user).to.have.property('name');",
											"            pm.expect(user).to.have.property('email');",
											"            pm.expect(user).to.have.property('gender');",
											"            pm.expect(user).to.have.property('status');",
											"        });",
											"    }",
											"});",
											"",
											"pm.test(\"No users should have gender other than 'male'\", function () {",
											"    if (jsonData.length > 0) {",
											"        jsonData.forEach(user => {",
											"            pm.expect(user.gender).to.not.equal('female');",
											"            pm.expect(user.gender).to.not.equal('other');",
											"        });",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/public/v2/users/?gender=male&status=active",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										""
									],
									"query": [
										{
											"key": "gender",
											"value": "male"
										},
										{
											"key": "status",
											"value": "active"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch User (TC-05) [N] - One Should not be able to get the user with invalid authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 for invalid authentication\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response should contain 'message' key with 'Unauthorized' message\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal(\"Invalid token\"); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "SANSNkNkn"
									}
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}sabkjNSNALK"
									}
								],
								"url": "{{url}}/public/v2/users/{{id}}"
							},
							"response": []
						},
						{
							"name": "Fetch User (TC-06) [N] - One Should not be able to get the user with empty ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": "{{url}}/public/v2/users/{{emptyId}}"
							},
							"response": []
						},
						{
							"name": "Fetch User (TC-07) [P] - Should read user using Pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Response should return correct number of users based on limit\", function () {",
											"    const limit = 10;  ",
											"    pm.expect(jsonData.length).to.equal(limit);",
											"});",
											"",
											"pm.test(\"All users should be of the expected gender\", function () {",
											"    const expectedGender = 'male';  ",
											"    jsonData.forEach(user => {",
											"        pm.expect(user.gender).to.include(expectedGender);",
											"    });",
											"});",
											"",
											"pm.test(\"All users should have the correct status\", function () {",
											"    jsonData.forEach(user => {",
											"        pm.expect(['active', 'inactive']).to.include(user.status);",
											"    });",
											"});",
											"",
											"pm.test(\"Each user should have required fields\", function () {",
											"    jsonData.forEach(user => {",
											"        pm.expect(user).to.have.property('id');",
											"        pm.expect(user).to.have.property('name');",
											"        pm.expect(user).to.have.property('email');",
											"        pm.expect(user).to.have.property('gender');",
											"        pm.expect(user).to.have.property('status');",
											"    });",
											"});",
											"",
											"pm.test(\"Response should be empty if no data matches the filter\", function () {",
											"    if (jsonData.length === 0) {",
											"        pm.expect(jsonData).to.be.an('array').that.is.empty;",
											"    }",
											"});",
											"",
											"pm.test(\"Next page link should be present if there are more results\", function () {",
											"    if (jsonData.totalPages > jsonData.page) {",
											"        pm.expect(jsonData).to.have.property('next');",
											"    } else {",
											"        pm.expect(jsonData).to.not.have.property('next');",
											"    }",
											"});",
											"",
											"pm.test(\"Response time should be under 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Last page pagination should return correct data\", function () {",
											"",
											"    // checking if page matches totalPages (last page)",
											"    pm.expect(jsonData.page).to.equal(jsonData.totalPages);",
											"    pm.expect(jsonData).to.be.an('array');",
											"    // checking having length as per limit",
											"    pm.expect(jsonData.length).to.be.at.most(10);  ",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/public/v2/users?page=1&limit=10",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "### **Get User (GET)**\n\nThe **Get User (GET)** operation retrieves user details from the GoRest API, testing various scenarios for accurate data retrieval and error handling.\n\n#### **Test Scenarios:**\n\n1. **Fetch User by Valid ID**: Verifies successful retrieval of user details with a valid ID.\n    \n2. **Fetch All Users**: Tests fetching a list of users and validates pagination functionality.\n    \n3. **Fetch User with Invalid ID**: Ensures correct error handling for invalid IDs, returning a `404 Not Found` status.\n    \n4. **Fetch User with Empty ID**: Validates that an empty ID triggers a `400 Bad Request`.\n    \n5. **Pagination Test**: Ensures proper handling of paginated results, with correct `totalPages` and `currentPage`.\n    \n6. **Missing Authentication**: Tests for a `401 Unauthorized` status when no valid authentication token is provided.\n    \n\n#### **Expected Outcomes:**\n\n- Correct user details should be returned with the expected schema.\n    \n- Proper error messages for invalid IDs and unauthorized access."
				},
				{
					"name": "Update User (PUT)",
					"item": [
						{
							"name": "Update User (TC-01) [P] - Should update user details with a valid user ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"",
											"const formattedName = fullName.toLowerCase().replace(/\\s+/g, '.');",
											"",
											"const randomInteger = Math.floor(Math.random() * 1000);",
											"",
											"const emailId = `${formattedName}${randomInteger}@example.com`;",
											"",
											"// setting environment variables",
											"pm.environment.set(\"name\", code + fullName);",
											"pm.environment.set(\"email\", emailId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"pm.test(\"Response should contain expected properties\", function () {",
											"    pm.expect(responseData).to.have.property(\"id\");",
											"    pm.expect(responseData).to.have.property(\"name\");",
											"    pm.expect(responseData).to.have.property(\"email\");",
											"    pm.expect(responseData).to.have.property(\"gender\");",
											"    pm.expect(responseData).to.have.property(\"status\");",
											"});",
											"",
											"pm.test(\"Updated user details should match request data\", function () {",
											"    pm.expect(responseData.name).to.eql(pm.environment.get(\"name\"));",
											"    pm.expect(responseData.email).to.eql(pm.environment.get(\"email\"));",
											"    pm.expect(responseData.gender).to.eql(\"male\");",
											"    pm.expect(responseData.status).to.eql(\"inactive\");",
											"});",
											"",
											"pm.test(\"User ID should remain the same after update\", function () {",
											"    pm.expect(responseData.id).to.eql(pm.environment.get(\"id\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"gender\": \"male\",\n    \"email\": \"{{email}}\",\n    \"status\": \"inactive\"\n}"
								},
								"url": "{{url}}/public/v2/users/{{id}}"
							},
							"response": []
						},
						{
							"name": "Update User (TC-02) [P] - Should update only the name field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"",
											"const formattedName = fullName.toLowerCase().replace(/\\s+/g, '.');",
											"",
											"const randomInteger = Math.floor(Math.random() * 1000);",
											"",
											"const emailId = `${formattedName}${randomInteger}@example.com`;",
											"",
											"// setting environment variables",
											"pm.environment.set(\"name\", code + fullName);",
											"pm.environment.set(\"email\", emailId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response should contain expected properties\", function () {",
											"    pm.expect(responseData).to.have.property(\"id\");",
											"    pm.expect(responseData).to.have.property(\"name\");",
											"    pm.expect(responseData).to.have.property(\"email\");",
											"    pm.expect(responseData).to.have.property(\"gender\");",
											"    pm.expect(responseData).to.have.property(\"status\");",
											"});",
											"",
											"pm.test(\"Only the name field should be updated\", function () {",
											"    pm.expect(responseData.name).to.eql(pm.environment.get(\"name\"));",
											"});",
											"",
											"pm.test(\"User ID should remain unchanged\", function () {",
											"    pm.expect(responseData.id).to.eql(pm.environment.get(\"id\"));",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\"\n}"
								},
								"url": "{{url}}/public/v2/users/{{id}}"
							},
							"response": []
						},
						{
							"name": "Update User (TC-03) [P] - Should update only the gender field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"",
											"const formattedName = fullName.toLowerCase().replace(/\\s+/g, '.');",
											"",
											"const randomInteger = Math.floor(Math.random() * 1000);",
											"",
											"const emailId = `${formattedName}${randomInteger}@example.com`;",
											"",
											"// setting environment variables",
											"pm.environment.set(\"name\", code + fullName);",
											"pm.environment.set(\"email\", emailId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response should contain expected properties\", function () {",
											"    pm.expect(responseData).to.have.property(\"gender\");",
											"});",
											"",
											"pm.test(\"Only the gender field should be updated\", function () {",
											"    pm.expect(responseData.gender).to.eql(\"male\");",
											"});",
											"",
											"pm.test(\"User ID should remain unchanged\", function () {",
											"    pm.expect(responseData.id).to.eql(pm.environment.get(\"id\"));",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gender\": \"male\"\n}"
								},
								"url": "{{url}}/public/v2/users/{{id}}"
							},
							"response": []
						},
						{
							"name": "Update User (TC-04) [P] - Should update user details with additional valid fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"",
											"const formattedName = fullName.toLowerCase().replace(/\\s+/g, '.');",
											"",
											"const randomInteger = Math.floor(Math.random() * 1000);",
											"",
											"const emailId = `${formattedName}${randomInteger}@example.com`;",
											"",
											"// setting environment variables",
											"pm.environment.set(\"name\", code + fullName);",
											"pm.environment.set(\"email\", emailId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response should contain expected properties\", function () {",
											"    pm.expect(responseData).to.have.property(\"status\");",
											"});",
											"",
											"pm.test(\"Only the gender field should be updated\", function () {",
											"    pm.expect(responseData.status).to.eql(\"inactive\");",
											"});",
											"",
											"pm.test(\"User ID should remain unchanged\", function () {",
											"    pm.expect(responseData.id).to.eql(pm.environment.get(\"id\"));",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"inactive\"\n}"
								},
								"url": "{{url}}/public/v2/users/{{id}}"
							},
							"response": []
						},
						{
							"name": "Update User (TC-05) [P] - Should allow multiple updates on the same user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"",
											"const formattedName = fullName.toLowerCase().replace(/\\s+/g, '.');",
											"",
											"const randomInteger = Math.floor(Math.random() * 1000);",
											"",
											"const emailId = `${formattedName}${randomInteger}@example.com`;",
											"",
											"// setting environment variables",
											"pm.environment.set(\"name\", code + fullName);",
											"pm.environment.set(\"email\", emailId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"// validating all necessary fields exist in the response",
											"pm.test(\"Response should contain expected properties\", function () {",
											"    const expectedProps = [\"id\", \"name\", \"email\", \"gender\", \"status\"];",
											"    expectedProps.forEach(prop => {",
											"        pm.expect(jsonData).to.have.property(prop);",
											"    });",
											"});",
											"",
											"// validating the User ID remains the same",
											"pm.test(\"User ID should remain unchanged\", function () {",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"id\"));",
											"});",
											"",
											"pm.test(\"Response time should be within acceptable limits\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Response should have correct Content-Type header\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": { \"type\": \"number\" },",
											"        \"name\": { \"type\": \"string\" },",
											"        \"email\": { \"type\": \"string\" },",
											"        \"gender\": { \"type\": \"string\", \"enum\": [\"male\", \"female\"] },",
											"        \"status\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"id\", \"name\", \"email\", \"gender\", \"status\"]",
											"};",
											"",
											"pm.test(\"Response follows expected JSON schema\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"gender\": \"male\",\n    \"email\": \"{{email}}\",\n    \"status\": \"inactive\"\n}"
								},
								"url": "{{url}}/public/v2/users/{{id}}"
							},
							"response": []
						},
						{
							"name": "Update User (TC-06) [N] - Should not update user details with an invalid user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Response should contain error message\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Resource not found\");",
											"});",
											"",
											"",
											"pm.test(\"Response time should be less than 2 seconds\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											"",
											"pm.test(\"Response body should contain message property\", function () {",
											"    pm.expect(jsonData).to.have.property('message');",
											"    pm.expect(jsonData.message).to.be.a('string');",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"",
											"pm.test(\"Response should match the expected schema\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Response should not include user details\", function () {",
											"    pm.expect(jsonData).to.not.have.any.keys('id', 'name', 'email', 'gender', 'status');",
											"});",
											"",
											"pm.test(\"Response should contain X-Content-Type-Options header\", function () {",
											"    pm.expect(pm.response.headers.has('X-Content-Type-Options')).to.be.true;",
											"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.equal('nosniff');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"",
											"const formattedName = fullName.toLowerCase().replace(/\\s+/g, '.');",
											"",
											"const randomInteger = Math.floor(Math.random() * 1000);",
											"",
											"const emailId = `${formattedName}${randomInteger}@example.com`;",
											"",
											"// setting environment variables",
											"pm.environment.set(\"name\", code + fullName);",
											"pm.environment.set(\"email\", emailId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"gender\": \"male\",\n    \"email\": \"{{email}}\",\n    \"status\": \"inactive\"\n}"
								},
								"url": "{{url}}/public/v2/users/{{id}}121"
							},
							"response": []
						},
						{
							"name": "Update User (TC-07) [N] - Should not update user with an empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"",
											"const formattedName = fullName.toLowerCase().replace(/\\s+/g, '.');",
											"",
											"const randomInteger = Math.floor(Math.random() * 1000);",
											"",
											"const emailId = `${formattedName}${randomInteger}@example.com`;",
											"",
											"// setting environment variables",
											"pm.environment.set(\"name\", code + fullName);",
											"pm.environment.set(\"email\", emailId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\"\n}"
								},
								"url": "{{url}}/public/v2/users/{{id}}"
							},
							"response": []
						},
						{
							"name": "Update User (TC-08) [N] - Should not update user with an invalid gender value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"const jsonData = pm.response.json();",
											"pm.test(\"Response should contain gender validation error message\", function () {",
											"    if (jsonData && jsonData.length > 0) {",
											"        pm.expect(jsonData[0].field).to.eql(\"gender\");",
											"        pm.expect(jsonData[0].message).to.eql(\"can't be blank, can be male of female\");",
											"    } else {",
											"        pm.fail(\"Invalid response structure: Missing expected error details.\");",
											"    }",
											"});",
											"",
											"pm.test(\"Response should have correct Content-Type header\", function () {",
											"    const contentType = pm.response.headers.get(\"Content-Type\");",
											"    if (contentType && contentType.includes(\"application/json\")) {",
											"        pm.expect(contentType).to.include(\"application/json\");",
											"    } else {",
											"        pm.fail(\"Response is not in JSON format.\");",
											"    }",
											"});",
											"",
											"pm.test(\"Response time should be less than 2 seconds\", function () {",
											"    if (pm.response.responseTime) {",
											"        pm.expect(pm.response.responseTime).to.be.below(2000);",
											"    } else {",
											"        pm.fail(\"Response time was not available.\");",
											"    }",
											"});",
											"",
											"pm.test(\"Response body should contain 'field' and 'message' properties\", function () {",
											"    if (jsonData && jsonData.length > 0) {",
											"        pm.expect(jsonData[0]).to.have.property('field');",
											"        pm.expect(jsonData[0]).to.have.property('message');",
											"        pm.expect(jsonData[0].field).to.equal('gender');",
											"        pm.expect(jsonData[0].message).to.be.a('string');",
											"    } else {",
											"        pm.fail(\"Missing 'field' or 'message' property in response.\");",
											"    }",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"field\": { \"type\": \"string\" },",
											"            \"message\": { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"field\", \"message\"]",
											"    }",
											"};",
											"",
											"pm.test(\"Response should match the expected schema\", function () {",
											"    if (jsonData && jsonData.length > 0) {",
											"        pm.response.to.have.jsonSchema(schema);",
											"    } else {",
											"        pm.fail(\"Response does not match expected schema: Missing or incorrect structure.\");",
											"    }",
											"});",
											"",
											"pm.test(\"Response should not contain user details\", function () {",
											"    if (jsonData && jsonData.length > 0) {",
											"        pm.expect(jsonData[0]).to.not.have.any.keys('id', 'name', 'email', 'status');",
											"    } else {",
											"        pm.fail(\"Response body is missing or contains unexpected fields.\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"",
											"const formattedName = fullName.toLowerCase().replace(/\\s+/g, '.');",
											"",
											"const randomInteger = Math.floor(Math.random() * 1000);",
											"",
											"const emailId = `${formattedName}${randomInteger}@example.com`;",
											"",
											"// setting environment variables",
											"pm.environment.set(\"name\", code + fullName);",
											"pm.environment.set(\"email\", emailId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gender\": \"unknown\"\n}"
								},
								"url": "{{url}}/public/v2/users/{{id}}"
							},
							"response": []
						},
						{
							"name": "Update User (TC-09) [N] - Should not allow updating user with an invalid email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"const jsonData = pm.response.json();",
											"pm.test(\"Response should contain gender validation error message\", function () {",
											"    if (jsonData && jsonData.length > 0) {",
											"        pm.expect(jsonData[0].field).to.eql(\"email\");",
											"        pm.expect(jsonData[0].message).to.eql(\"is invalid\");",
											"    } else {",
											"        pm.fail(\"Invalid response structure: Missing expected error details.\");",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"",
											"const formattedName = fullName.toLowerCase().replace(/\\s+/g, '.');",
											"",
											"const randomInteger = Math.floor(Math.random() * 1000);",
											"",
											"const emailId = `${formattedName}${randomInteger}@example.com`;",
											"",
											"// setting environment variables",
											"pm.environment.set(\"name\", code + fullName);",
											"pm.environment.set(\"email\", emailId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"hdss%%22t#$$\"\n}"
								},
								"url": "{{url}}/public/v2/users/{{id}}"
							},
							"response": []
						},
						{
							"name": "Update User (TC-10) [N] - Should not update user with missing authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 for missing authentication\", function () {",
											"    pm.response.to.have.status(401); ",
											"});",
											"const jsonData = pm.response.json();",
											"pm.test(\"Response should contain authentication error message\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\"); ",
											"});",
											"",
											"pm.test(\"Response should have proper error format\", function () {",
											"    pm.expect(jsonData).to.have.all.keys('message');",
											"});",
											"",
											"pm.test(\"Validate if the error message is not empty\", function () {",
											"    pm.expect(jsonData.message).to.not.be.empty;  ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const code = pm.globals.get(\"companyCode\");",
											"const fullName = pm.variables.replaceIn(' {{$randomFullName}}');",
											"",
											"const formattedName = fullName.toLowerCase().replace(/\\s+/g, '.');",
											"",
											"const randomInteger = Math.floor(Math.random() * 1000);",
											"",
											"const emailId = `${formattedName}${randomInteger}@example.com`;",
											"",
											"// setting environment variables",
											"pm.environment.set(\"name\", code + fullName);",
											"pm.environment.set(\"email\", emailId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "SANSNkNkn"
									}
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"gender\": \"male\",\n    \"email\": \"{{email}}\",\n    \"status\": \"inactive\"\n}"
								},
								"url": "{{url}}/public/v2/users/{{id}}"
							},
							"response": []
						},
						{
							"name": "Update User (TC-11) [N] - Should not be able to update user details with an empty user ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 for empty user ID\", function () {",
											"    pm.response.to.have.status(404); ",
											"});",
											"const jsonData = pm.response.json();",
											"pm.test(\"Response should contain 'Resource not found' message\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Resource not found\"); ",
											"});",
											"",
											"pm.test(\"Response should not contain any unexpected keys\", function () {",
											"    pm.expect(jsonData).to.have.all.keys('message'); ",
											"});",
											"",
											"pm.test(\"Response should return a proper error message format\", function () {",
											"    pm.expect(jsonData.message).to.be.a('string'); ",
											"});",
											"",
											"pm.test(\"Response should not be empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"gender\": \"male\",\n    \"email\": \"{{email}}\",\n    \"status\": \"inactive\"\n}"
								},
								"url": "{{url}}/public/v2/users/{{emptyId}}"
							},
							"response": []
						}
					],
					"description": "### **Update User (PUT)**\n\nThe **Update User (PUT)** operation tests the modification of user details in the GoRest API, ensuring correct data updates and error handling.\n\n#### **Test Scenarios:**\n\n1. **Valid ID Update**: Verifies successful update of user details.\n    \n2. **Name Field Update**: Confirms updating only the name field.\n    \n3. **Gender Field Update**: Ensures only the gender field is updated.\n    \n4. **Invalid ID**: Returns `404 Not Found` for invalid IDs.\n    \n5. **Empty ID**: Triggers a `400 Bad Request` for empty IDs.\n    \n6. **Invalid Gender**: Returns `422 Unprocessable Entity` for invalid gender.\n    \n7. **Missing Authentication**: Ensures `401 Unauthorized` for missing auth.\n    \n8. **Invalid Data**: Verifies correct error response for invalid data.\n    \n\n#### **Expected Outcomes:**\n\n- Successful updates return `200 OK`.\n    \n- Errors for invalid data return appropriate status codes (`404`, `422`)."
				},
				{
					"name": "Delete User (DELETE)",
					"item": [
						{
							"name": "Delete User (TC-01) [P] - Should delete a user with a valid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Response body should be empty\", function () {",
											"    pm.response.to.have.body('');",
											"});",
											"",
											"let deletedUserId = pm.environment.get(\"id\");",
											"pm.sendRequest({",
											"    url: `${pm.environment.get(\"url\")}/users/${deletedUserId}`,",
											"    method: 'GET',",
											"}, (err, res) => {",
											"    if (res) {",
											"        pm.test(\"Deleted user should return a status of 404\", function () {",
											"            pm.expect(res).to.have.property('code', 404);",
											"        });",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{url}}/public/v2/users/{{id}}"
							},
							"response": []
						},
						{
							"name": "Delete User (TC-02) [N] - Should not be able to delete user with empty id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response should contain appropriate error message\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    if (jsonData.message) {",
											"        pm.expect(jsonData.message).to.eql(\"Resource not found\");",
											"    } else {",
											"        pm.expect(jsonData).to.have.property(\"message\", \"Resource not found\");",
											"    }",
											"});",
											"",
											"pm.test(\"Response body should not be empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Response should be a valid JSON object\", function () {",
											"    try {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.be.an(\"object\");",
											"    } catch (e) {",
											"        pm.expect.fail(\"Response body is not valid JSON\");",
											"    }",
											"});",
											"",
											"pm.test(\"Check if message field exists\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"});",
											"",
											"pm.test(\"Validate invalid ID format\", function () {",
											"    const invalidId = pm.variables.get(\"invalidId\");",
											"    pm.expect(invalidId).to.match(/^[A-Za-z0-9]+$/); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{url}}/public/v2/users/{{emptyId}}"
							},
							"response": []
						},
						{
							"name": "Delete User (TC-03) [N] - Should not be able to delete user with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response should contain appropriate error message\", function () {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    if (jsonData.message) {",
											"        pm.expect(jsonData.message).to.eql(\"Resource not found\");",
											"    } else {",
											"        pm.expect(jsonData).to.have.property(\"message\", \"Resource not found\");",
											"    }",
											"});",
											"",
											"pm.test(\"Response body should not be empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Response should be a valid JSON object\", function () {",
											"    try {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.be.an(\"object\");",
											"    } catch (e) {",
											"        pm.expect.fail(\"Response body is not valid JSON\");",
											"    }",
											"});",
											"",
											"pm.test(\"Check if message field exists\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"});",
											"",
											"pm.test(\"Validate invalid ID format\", function () {",
											"    const invalidId = pm.variables.get(\"invalidId\");",
											"    pm.expect(invalidId).to.match(/^[A-Za-z0-9]+$/); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": "{{url}}/public/v2/users/2139147@"
							},
							"response": []
						},
						{
							"name": "Delete User (TC-04) [N] - Should not delete a user without authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response should contain 'Invalid token' message\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "SANSNkNkn"
									}
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": "{{url}}/public/v2/users/{{id}}"
							},
							"response": []
						}
					],
					"description": "### **Delete User (DELETE)**\n\nThe **Delete User (DELETE)** operation tests the removal of user data from the GoRest API, ensuring correct deletion and error handling.\n\n#### **Test Scenarios:**\n\n1. **Valid ID Deletion**: Verifies successful user deletion with a valid ID.\n    \n2. **Empty ID**: Ensures a `400 Bad Request` response when the ID is empty.\n    \n3. **Invalid ID**: Returns `404 Not Found` for a non-existent ID.\n    \n4. **Missing Authentication**: Triggers `401 Unauthorized` when authentication is missing.\n    \n5. **Invalid Token**: Ensures `401 Unauthorized` for an invalid authentication token.\n    \n\n#### **Expected Outcomes:**\n\n- Successful deletions return `204 No Content`.\n    \n- Errors for invalid data or missing authentication return appropriate status codes (`400`, `401`, `404`)."
				}
			],
			"description": "# Enviroment Used: Staged"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "64f0216a8486d818e322577a61b1a77c7551ff89c3bb9c7a21c2d5648aed12d1",
			"type": "default"
		},
		{
			"key": "emptyId",
			"value": "\" \"",
			"type": "string"
		}
	]
}